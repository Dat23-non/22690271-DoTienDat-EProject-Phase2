name: CI - Unit & Integration Tests

on: [push, pull_request]

jobs:
  test-auth:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.adminCommand(\"ping\")'"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 4
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: auth/package-lock.json

      - run: npm ci --prefix auth

      - name: Create .env for auth
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
          echo "NODE_ENV=test" >> auth/.env
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test" >> auth/.env

      - name: Run tests
        run: npm test --prefix auth

  test-product:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.adminCommand(\"ping\")'"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 4
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: product/package-lock.json

      - run: npm ci --prefix product
      - run: npm ci --prefix auth

      - name: Create .env for product
        run: |
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
          echo "NODE_ENV=test" >> product/.env
          echo "MONGODB_PRODUCT_URI=mongodb://localhost:27017/product_test" >> product/.env

      - name: Start auth service
        run: |
          cd auth
          echo "MONGODB_AUTH_URI=mongodb://localhost:27017/auth_test" > .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          npm start &
          sleep 5
          curl -X POST http://localhost:3000/register \
            -H "Content-Type: application/json" \
            -d '{"username":"testuser","password":"123456"}' || echo "User might already exist"

      - name: Run product tests
        run: npm test --prefix product

      - name: Stop auth service
        run: pkill node || true

  build-and-push:
    needs: [test-auth, test-product]
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    strategy:
      matrix:
        service: [auth, product, order, api-gateway]

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/eproject-${{ matrix.service }}:latest
          platforms: linux/amd64
